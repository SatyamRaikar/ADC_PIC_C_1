 




// PIC16F877A Configuration Bit Settings
// 'C' source line config statements
// CONFIG
#pragma config FOSC = EXTRC     // Oscillator Selection bits (RC oscillator)
#pragma config WDTE = OFF        // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF       // Brown-out Reset Enable bit (BOR enabled)
#pragma config LVP = OFF         // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3/PGM pin has PGM function; low-voltage programming enabled)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#define _XTAL_FREQ 6000000

void init(void);
void Lcd_Command(unsigned char);
void Lcd_Data(unsigned char);
void Lcd_Output(unsigned int);
unsigned char n,j;
unsigned int k[10];
unsigned int lowvalue,hivalue,m,delaycount;
unsigned long value,voltage;


void main()
{
 init();
 while(1)
 {
     ADCON0|=0X04;  //  A/D CONVERSION IN PROGRESS
     while(ADCON0&0X04);
     lowvalue=ADRESL;
     hivalue=ADRESH;
     value=((unsigned int)hivalue<<2)+((unsigned int)lowvalue>>8);
     voltage=value*101/1023;
     Lcd_Command(0x80);
     Lcd_Output(voltage);
     __delay_ms(100);
 }    
    
}
void init(void)
{
  TRISA=0X04;   //set pin RA2 as input pin 
  TRISC=0X00;
  TRISD=0X00;
  ADCON0=0X91;   // 1001 0001     ADCON0 BIT-0=1 (A/D CONVERTER MODULE IS POWERED UP) BIT-5-3 (010)CHANNEL 2 BIT-7-6 (10)FOSC/32
  ADCON1=0X00;   //0000 0000      ADCON1 BIT-3-0 ASSIGNES AN0 to AN7 ANALOGE PIN  BIT-6 AS 0 AND BIT-7 (0) RIGHT JUSTIFICATION   
  Lcd_Command(0x38);
  __delay_ms(100);
  Lcd_Command(0x38);
  __delay_ms(100);
  Lcd_Command(0x38);
  __delay_ms(100);
  Lcd_Command(0x38);
  __delay_ms(100);
  Lcd_Command(0x06);
  __delay_ms(100);
  Lcd_Command(0x0C);
  __delay_ms(100);
  Lcd_Command(0x01);
  __delay_ms(100);
  
}
void Lcd_Output(unsigned int i)
{
    unsigned char s;
    j=1;
    m=i;
    if(m==100)
    {
        Lcd_Command(0x83);
        Lcd_Data(0x56);
        Lcd_Command(0x82);
        Lcd_Data(0x30);
        Lcd_Command(0x81);
        Lcd_Data(0x30);
        Lcd_Command(0x80);
        Lcd_Data(0x31);
        
        
    }
    else
    {    
    while(m!=0)
    {
        s=m-(m/10)*10;
        k[j]=s;
        j++;
        m=m/10;
    }
    k[j]='\0';
    j=j-1;
    Lcd_Command(0x80);
        Lcd_Data(0x20);
    if(k[2]>0)
    {Lcd_Command(0x81);
       
        n=0x30+k[2];
        Lcd_Data(n);
    }
    else
    {  Lcd_Command(0x81);
        Lcd_Data(0x20);
    }
    Lcd_Command(0x82);
    n=0x30+k[1];
    Lcd_Data(n);
    Lcd_Command(0x83);
    Lcd_Data(0x56);
    }
}
void Lcd_Command(unsigned char t){
    PORTC&=~0x08;
    PORTD=t;
    PORTC|=0x01;
    PORTC&=~0x01;
    __delay_ms(50);
}

void Lcd_Data(unsigned char t){
    PORTC|=0x08;
    PORTD=t;
    PORTC|=0x01;
    PORTC&=~0x01;
    __delay_ms(5);
}